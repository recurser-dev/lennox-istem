#!/bin/bash# ü¶ò Australian Wildlife Monitor - Fresh Installation Script# One-click setup for completely fresh computersset -e  # Exit on any error# Colors and effectsRED='\033[0;31m'GREEN='\033[0;32m'YELLOW='\033[1;33m'BLUE='\033[0;34m'PURPLE='\033[0;35m'CYAN='\033[0;36m'WHITE='\033[1;37m'BOLD='\033[1m'NC='\033[0m' # No Color# Animation functionanimate_text() {    local text="$1"    local delay="$2"    for (( i=0; i<${#text}; i++ )); do        echo -n "${text:$i:1}"        sleep "$delay"    done    echo}# Progress bar functionprogress_bar() {    local duration=$1    local size=50    local progress=0        echo -ne "${BLUE}["    while [ $progress -lt $size ]; do        echo -ne "‚ñà"        sleep 0.02        ((progress++))    done    echo -e "]${NC} ‚úÖ"}clear# Flashy bannerecho -e "${PURPLE}${BOLD}"cat << "EOF"      ü¶ò AUSTRALIAN WILDLIFE MONITOR ü¶ò  ==================================        Real AI Detection ‚Ä¢ Australian Animals    TensorFlow.js ‚Ä¢ Live Webcam Feed    EOFecho -e "${NC}"animate_text "üöÄ Setting up your Wildlife Monitor..." 0.03echo ""# Check macOSif [[ "$OSTYPE" != "darwin"* ]]; then    echo -e "${RED}‚ùå This installer is designed for macOS only${NC}"    exit 1fi# Check and setup Node.jsecho -e "${CYAN}üì¶ Checking Node.js installation...${NC}"NODE_VERSION=""if command -v node >/dev/null 2>&1; then    NODE_VERSION=$(node --version)    MAJOR_VERSION=$(echo $NODE_VERSION | cut -d'.' -f1 | sed 's/v//')        echo -e "${WHITE}   Current Node.js: $NODE_VERSION${NC}"        if [ "$MAJOR_VERSION" -ge 24 ]; then        echo -e "${YELLOW}‚ö†Ô∏è  Node.js v24+ detected - will need compatibility fix${NC}"        NEEDS_NODE_FIX=true    elif [ "$MAJOR_VERSION" -lt 18 ]; then        echo -e "${YELLOW}‚ö†Ô∏è  Old Node.js version - will recommend upgrade${NC}"        NEEDS_NODE_FIX=true    else        echo -e "${GREEN}‚úÖ Compatible Node.js version${NC}"        NEEDS_NODE_FIX=false    fielse    echo -e "${YELLOW}‚ùå Node.js not found${NC}"    echo -e "${WHITE}üì• Installing Node.js v20 (LTS)...${NC}"        # Check if Homebrew is available    if command -v brew >/dev/null 2>&1; then        echo -e "${BLUE}   Using Homebrew to install Node.js...${NC}"        brew install node@20        brew link node@20 --force    else        echo -e "${BLUE}   Please install Node.js manually from: https://nodejs.org${NC}"        echo -e "${WHITE}   Download Node.js v20 (LTS) and run this script again${NC}"        open "https://nodejs.org/"        exit 1    fifiecho ""# Choose installation directoryecho -e "${CYAN}üìÅ Choose installation location:${NC}"echo -e "${WHITE}   1) Desktop (recommended)${NC}"echo -e "${WHITE}   2) Documents${NC}"echo -e "${WHITE}   3) Custom location${NC}"echo ""read -p "Choose (1-3): " location_choicecase $location_choice in    1)        INSTALL_DIR="$HOME/Desktop/LennoxIstem"        ;;    2)        INSTALL_DIR="$HOME/Documents/LennoxIstem"        ;;    3)        read -p "Enter custom path: " custom_path        INSTALL_DIR="$custom_path/LennoxIstem"        ;;    *)        INSTALL_DIR="$HOME/Desktop/LennoxIstem"        echo -e "${YELLOW}Using default: Desktop${NC}"        ;;esacecho -e "${WHITE}üìÅ Installing to: $INSTALL_DIR${NC}"echo ""# Create directory and cloneecho -e "${CYAN}üì• Downloading Australian Wildlife Monitor...${NC}"if [ -d "$INSTALL_DIR" ]; then    echo -e "${YELLOW}‚ö†Ô∏è  Directory exists. Removing old installation...${NC}"    rm -rf "$INSTALL_DIR"fimkdir -p "$(dirname "$INSTALL_DIR")"cd "$(dirname "$INSTALL_DIR")"echo -e "${BLUE}   Cloning from GitHub...${NC}"git clone https://github.com/recurser-dev/lennox-istem.git "$(basename "$INSTALL_DIR")"cd "$INSTALL_DIR"echo -e "${GREEN}‚úÖ Download complete${NC}"echo ""# Make scripts executableecho -e "${CYAN}üîß Setting up executable scripts...${NC}"chmod +x *.command 2>/dev/null || true# Install dependencies with compatibility handlingecho -e "${CYAN}üì¶ Installing dependencies...${NC}"echo -e "${WHITE}   This may take a few minutes...${NC}"# Try standard install firstif npm install --legacy-peer-deps; then    echo -e "${GREEN}‚úÖ Dependencies installed successfully${NC}"else    echo -e "${YELLOW}‚ö†Ô∏è  Standard install failed, trying compatibility fix...${NC}"        # Clean and retry    rm -rf node_modules    rm -f package-lock.json    npm cache clean --force        # Force compatible versions    npm install --save --legacy-peer-deps \        "@tensorflow/tfjs@3.21.0" \        "@tensorflow/tfjs-node@3.21.0" \        "@tensorflow-models/coco-ssd@2.2.2" \        "express@4.18.2" \        "socket.io@4.7.2" \        "cors@2.8.5" \        "canvas@3.1.2"        # Install remaining dependencies    npm install --legacy-peer-depsfiecho ""# Test TensorFlow.js compatibilityecho -e "${CYAN}üß™ Testing TensorFlow.js compatibility...${NC}"TEST_RESULT=$(node -e "try {  const tf = require('@tensorflow/tfjs-node');  const cocoSsd = require('@tensorflow-models/coco-ssd');  console.log('SUCCESS');} catch (error) {  console.log('FAILED:', error.message);}" 2>/dev/null || echo "FAILED: Module not found")if [[ "$TEST_RESULT" == "SUCCESS" ]]; then    echo -e "${GREEN}‚úÖ TensorFlow.js working perfectly${NC}"    TENSORFLOW_OK=trueelse    echo -e "${YELLOW}‚ö†Ô∏è  TensorFlow.js needs fixing: $TEST_RESULT${NC}"    TENSORFLOW_OK=falsefiecho ""# Create desktop launcherecho -e "${CYAN}üöÄ Creating desktop launcher...${NC}"LAUNCHER_PATH="$HOME/Desktop/ü¶ò Launch Wildlife Monitor.command"cat > "$LAUNCHER_PATH" << EOF#!/bin/bashcd "$INSTALL_DIR"# Check if project existsif [ ! -f "server.js" ]; then    echo "‚ùå Wildlife Monitor not found at: $INSTALL_DIR"    echo "üí° Please run the installer again"    read -p "Press Enter to exit..."    exit 1fi# Check Node.js compatibilityNODE_VERSION=\$(node --version 2>/dev/null || echo "MISSING")if [[ "\$NODE_VERSION" == "MISSING" ]]; then    echo "‚ùå Node.js not found. Please install Node.js v20 from nodejs.org"    open "https://nodejs.org/"    read -p "Press Enter to exit..."    exit 1fiMAJOR_VERSION=\$(echo \$NODE_VERSION | cut -d'.' -f1 | sed 's/v//')if [ "\$MAJOR_VERSION" -ge 24 ]; then    echo "‚ö†Ô∏è  Node.js v24+ detected. Running compatibility fix..."    if [ -f "üîÑ Node.js Version Fix.command" ]; then        bash "üîÑ Node.js Version Fix.command"    else        echo "üí° Please downgrade to Node.js v20 for best compatibility"        echo "   Visit: https://nodejs.org/"        read -p "Continue anyway? (y/n): " choice        if [[ ! \$choice =~ ^[Yy]\$ ]]; then            exit 1        fi    fifi# Launch the monitorecho "ü¶ò Starting Australian Wildlife Monitor..."exec bash "ü¶ò Launch Aussie Wildlife Monitor.command"EOFchmod +x "$LAUNCHER_PATH"echo -e "${GREEN}‚úÖ Desktop launcher created${NC}"echo ""# Installation completeecho -e "${GREEN}${BOLD}"cat << "EOF"        ‚úÖ INSTALLATION COMPLETE! ‚úÖ    EOFecho -e "${NC}"echo -e "${CYAN}üìÅ FILES CREATED:${NC}"echo -e "${GREEN}  ü¶ò Launch Wildlife Monitor.command  ${BLUE}(Desktop)${NC}"echo -e "${GREEN}  üìÅ LennoxIstem/                     ${BLUE}($INSTALL_DIR)${NC}"echo -e "${GREEN}  üîß Fix scripts                      ${BLUE}(If needed)${NC}"echo ""echo -e "${YELLOW}${BOLD}üöÄ QUICK START:${NC}"echo -e "${WHITE}  1. ${BLUE}Double-click${NC} ü¶ò Launch Wildlife Monitor.command on Desktop"echo -e "${WHITE}  2. ${BLUE}Allow webcam access${NC} when browser prompts"echo -e "${WHITE}  3. ${BLUE}Click 'Start Monitoring'${NC} and watch AI detect Australian wildlife! ü¶ò${NC}"echo ""# Show specific next steps based on detected issuesif [[ "$NEEDS_NODE_FIX" == true ]] || [[ "$TENSORFLOW_OK" == false ]]; then    echo -e "${YELLOW}${BOLD}üîß IMPORTANT - FIX NEEDED:${NC}"        if [[ "$NEEDS_NODE_FIX" == true ]]; then        echo -e "${WHITE}  ‚Ä¢ ${RED}Node.js compatibility issue detected${NC}"        echo -e "${WHITE}    Run: ${BLUE}üîÑ Node.js Version Fix.command${NC}"    fi        if [[ "$TENSORFLOW_OK" == false ]]; then        echo -e "${WHITE}  ‚Ä¢ ${RED}TensorFlow.js needs fixing${NC}"        echo -e "${WHITE}    Run: ${BLUE}üîß Fix TensorFlow Compatibility.command${NC}"    fi        echo -e "${WHITE}  ‚Ä¢ ${BLUE}Then launch normally${NC}"    echo ""else    echo -e "${GREEN}${BOLD}üéâ Everything looks good! Ready to launch! üéâ${NC}"    echo ""fiecho -e "${PURPLE}üì± The monitor will open in your browser at: ${WHITE}http://localhost:3000${NC}"echo -e "${PURPLE}ü¶ò Detects: Cats‚ÜíQuolls, Dogs‚ÜíDingoes, Birds‚ÜíKookaburras, People‚ÜíWombats${NC}"echo ""# Ask if user wants to launch nowread -p "üöÄ Launch the Wildlife Monitor now? (y/n): " launch_choiceif [[ $launch_choice =~ ^[Yy]$ ]]; then    echo ""    echo -e "${CYAN}üöÄ Launching Australian Wildlife Monitor...${NC}"    exec bash "$LAUNCHER_PATH"else    echo ""    echo -e "${BLUE}üëç Run ${WHITE}ü¶ò Launch Wildlife Monitor.command${BLUE} when ready!${NC}"fi